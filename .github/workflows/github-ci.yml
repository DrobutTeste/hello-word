name: github-ci

on:
  push:
    tags:
      - '*'
    branches:
      - 'release/**'
      - 'hotfix/**'
      - 'feature/**'
      - 'develop'
      - 'main'

jobs:
  COMPILE:
    if: github.repository_owner == 'DrobutTeste'
    name: "COMPILE"
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          token: ${{ secrets.GIT_AUTH_NEW }}
      - uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: 'maven'
      - uses: actions/cache@v4
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-

      - name: Run compile
        run: mvn -DskipTests clean package

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-artifacts
          path: application/target/*.jar
          retention-days: 1

  ENTERPRISE:
    if: github.repository_owner == 'DrobutTeste'
    name: "ENTERPRISE"
    runs-on: ubuntu-latest
    needs:
      - COMPILE

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
         token: ${{ secrets.GIT_AUTH_NEW }}

      - name: Get branch name
        id: vars
        run: echo "branch_name=$(echo ${GITHUB_REF#refs/heads/})" >> $GITHUB_ENV

      - name: Configure Git
        run: |
          git config user.name "GitHub Actions[bot]"
          git config user.email "github-actions[bot]@saqueepague.com.br"

      - name: Add and Push to Enterprise
        env:
          TOKEN: ${{ secrets.GIT_AUTH_NEW }}
          BRANCH_NAME: ${{ env.branch_name }}
        run: |
          git remote add enterprise https://x-access-token:${TOKEN}@github.com/saqueepague/hello-word.git
          git remote -v
          git push enterprise $BRANCH_NAME --force

#  UNIT_TEST:
#    name: "UNIT_TEST"
#    runs-on: ubuntu-latest
#    needs:
#      - COMPILE
#    steps:
#      - uses: actions/checkout@v4
#        with:
#          token: ${{ secrets.PAT_TOKEN }}
#      - uses: actions/setup-java@v4
#        with:
#          java-version: '17'
#          distribution: 'temurin'
#          cache: 'maven'
#      - uses: actions/cache@v4
#        with:
#          path: ~/.m2/repository
#          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
#          restore-keys: |
#            ${{ runner.os }}-maven-
#
#      - name: Run unit tests
#        run: mvn test
#
#  LINTER_CHECKSTYLE:
#    name: "LINTER_CHECKSTYLE"
#    runs-on: ubuntu-latest
#    needs:
#      - COMPILE
#    steps:
#      - uses: actions/checkout@v4
#        with:
#          token: ${{ secrets.PAT_TOKEN }}
#      - uses: actions/setup-java@v4
#        with:
#          java-version: '17'
#          distribution: 'temurin'
#          cache: 'maven'
#      - uses: actions/cache@v4
#        with:
#          path: ~/.m2/repository
#          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
#          restore-keys: |
#            ${{ runner.os }}-maven-
#
#      - name: Run Linter checkstyle
#        run: mvn checkstyle:check

#  PUBLISH:
#    name: "PUBLISH"
#    runs-on: ubuntu-latest
#    needs:
#      - LINTER_CHECKSTYLE
#      - UNIT_TEST
#    steps:
#      - uses: actions/checkout@v4
#        with:
#          token: ${{ secrets.PAT_TOKEN }}
#      - uses: actions/setup-java@v4
#        with:
#          java-version: '17'
#          distribution: 'temurin'
#          cache: 'maven'
#
#      - name: Download build artifacts
#        uses: actions/download-artifact@v4
#        with:
#          name: build-artifacts
#          path: target
#
#      - name: Set Release version env variable
#        run: |
#          VERSION=$(mvn help:evaluate -Dexpression=project.version -q -DforceStdout)
#          if [[ $GITHUB_REF == refs/tags/* ]]; then
#            VERSION=${VERSION/-SNAPSHOT/}
#          fi
#          echo "RELEASE_VERSION=$VERSION" >> $GITHUB_ENV
#
#      - name: echo
#        run: |
#          echo ${{ env.RELEASE_VERSION }}
#
#      - name: Log in to GitHub Container Registry
#        run: echo "${{ secrets.PAT_TOKEN }}" | docker login ghcr.io -u ${{ github.actor }} --password-stdin
#
#      - name: Build and push Docker image
#        run: |
#          docker build -f Dockerfile -t ghcr.io/saqueepague/rede-compartilhada/identification:${{ env.RELEASE_VERSION }} .
#          docker tag ghcr.io/saqueepague/rede-compartilhada/identification:${{ env.RELEASE_VERSION }} ghcr.io/saqueepague/rede-compartilhada/identification:latest
#          docker push ghcr.io/saqueepague/rede-compartilhada/identification:${{ env.RELEASE_VERSION }}
#          docker push ghcr.io/saqueepague/rede-compartilhada/identification:latest
